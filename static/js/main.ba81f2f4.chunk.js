(this.webpackJsonpthesis=this.webpackJsonpthesis||[]).push([[0],{160:function(e,t,n){},175:function(e,t,n){},225:function(e,t,n){},227:function(e,t,n){},234:function(e,t,n){},245:function(e,t,n){},268:function(e,t){},270:function(e,t){},280:function(e,t,n){},281:function(e,t,n){},282:function(e,t,n){},317:function(e,t,n){"use strict";n.r(t);var o,a=n(0),s=n.n(a),i=n(19),r=n.n(i),l=(n(225),n(50)),c=n(26),d=(n(12),n(15),n(8),n(16),n(5),n(79),n(175),n(227),n(117),n(362),n(363),n(163),n(10)),u=(o={"line-color":"magenta","line-style":"dashed","target-arrow-color":"magenta"},Object(d.a)(o,"line-color","magenta"),Object(d.a)(o,"line-style","dashed"),Object(d.a)(o,"target-arrow-color","magenta"),Object(d.a)(o,"width",4),Object(d.a)(o,"line-dash-offset",3),Object(d.a)(o,"line-dash-pattern",[15,3]),Object(d.a)(o,"arrow-scale",1.5),n(195),n(90)),h=n.n(u);n(66);n(337),n(338),n(339),n(340),n(234);var b,m,p,f=n(1),g=(n(365),n(366),n(341),n(368),n(342),n(76),n(343),n(245),n(144)),y=(n(367),n(344),n(198),n(345),n(210),n(346),n(347),n(348),n(349),n(350),n(351),n(146)),w=3;var j=Object(y.c)(b||(b=Object(g.a)(["\nfrom {\n  transform: scaleX(100%);\n}\n\nto {\n  transform: scaleX(0%);\n}\n"])));y.b.div(m||(m=Object(g.a)(["\n  ","\n  background-color: #c44569;\n  height: 4px;\n  transform-origin: left center;\n  margin-bottom: 2px;\n"])),(function(e){return e.isPlaying&&Object(y.a)(p||(p=Object(g.a)(["\n      animation: "," ","s linear;\n    "])),j,w)}));n(356),n(357),n(358),n(359);n(62);var v,O=[{target:".websnapse-title",title:"Welcome to WebSnapse!",content:"This is a visual simulator to aid in the creation and simulation of SN P systems.",placement:"center",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#new-node-btn",title:"New Node",content:"You can create a new neuron here. You will then be prompted to give it a label name, rules and the number of spikes the neuron should initially contain.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#new-node-btn",title:"Creating Rules",content:"When writing rules, it should follow the format E/c->p;d, where E follows the regular expression (na)(+***) with n equal to the number of spikes required, c is na with c equal to the number of spikes to be consumed, p is na with c equal to the number of spikes to be produced and d equal to the delay. If creating a forgetting rule, set p to 0. Example: 2a(a)+/2a->0;0",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#new-input-btn",title:"New Input Node",content:"You can also create input neurons to send spikes to connected neurons in your system. Input neurons have spike trains made up of numbers separated by commas, with each representing the number of spikes the input neuron sends at the given time.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#new-output-btn",title:"New Output Node",content:"You can also create output neurons to receive the output of your system in the form of a spike train (string) composed of numbers separated by commas, with each representing the number of spikes the output neuron receives at the given time.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#del-node-btn",title:"Delete Node",content:"You can delete a neuron by choosing the neuron ID of the neuron you would like to delete. The neurons are ordered from oldest to last added. Deleting a neuron will also delete the synapses connected to the neuron. You can choose to cancel or save the changes you made, which will be seen right after.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#edit-node-btn",title:"Edit Regular Node",content:"You can edit a neuron by choosing the neuron ID of the neuron you would like to edit. The neurons are ordered from oldest to last added. You can edit the rules and spikes of the neuron. You can choose to cancel or save the changes you made, which will be seen right after.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#edit-inp-node-btn",title:"Edit Input Node",content:"You can edit an input neuron by choosing the neuron ID of the neuron you would like to edit. The neurons are ordered from oldest to last added. You can edit the spike train/bitstring of the neuron. You can choose to cancel or save the changes you made, which will be seen right after.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#edit-syn-btn",title:"Edit Synapse",content:"You can edit a synapse by first clicking the synapse you want to edit. You can edit the weight of the selected synapse. You can choose to cancel or save the changes you made, which will be seen right after.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#del-syn-btn",title:"Delete Synapse",content:"You can delete a synapse by first clicking the synapse you want to delete. You can choose to cancel or apply the deletion, which will be seen right after.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#clear-all-btn",title:"Clear All",content:"You can clear your workspace and delete all elements by clicking this button. You can choose to cancel or apply the deletion, which will be seen right after.",placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:".__________cytoscape_container",title:"The Workspace",content:"After adding a neuron, you will be able to see a visual representation here.  Inside each neuron, you will find the number of spikes the neuron has at the top, and its rules at the center. Below the neuron, you will find the current delay timer before the neuron spikes. By default, this is set to 0 and a neuron is set to spike at -1. ",placement:"bottom-start",offset:-400,disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:".__________cytoscape_container",title:"Creating Edges",content:"To create s or edges,  hover over the source node or neuron then a grey circle will appear and you can drag that to see a directed arrow that you can connect to your desired next node or neuron. ",placement:"bottom-start",offset:-400,disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:".snapse-controls",title:"Starting the Simulation",content:"Now it's time for simulations! You can simulate the system one step at a time by using the forward button. You can use the backward button to revert the system to the previous timestep.",placement:"bottom",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:".snapse-controls",title:"Starting the Simulation",content:"You can also simulate the system continuously by clicking the play button. It will then proceed to go step-by-step at default 3 second intervals until the simulation is paused or the system halts.",placement:"bottom",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#speed-slider",title:"Simulation Speed Slider",content:"You can change the speed of the continuous simulation through this slider. Drag the slider thumb to the left to slow the simulation down. Drag it to the right to speed the simulation up. Click 'Reset to 1x' to reset to default speed (3 second intervals).",placement:"bottom",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#res-btn",title:"Restart Simulation",content:"Click this button to restart your simulation from the top (timestep = 0).",placement:"bottom",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#formGridCheckbox",title:"Pseudorandom or Guided Mode",content:"If your system contains points of non-determinism, or rather, if a neuron can execute more than one rule at a time, you can choose to set the simulation to pseudorandom or guided mode. When using pseudorandom mode, the system chooses what rule to execute. When using guided mode, you will be prompted to choose which rule the neuron should follow for that timestep. ",placement:"bottom",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#react-burger-menu-btn",title:"Menu Actions",content:"In this menu, you will find other actions such as saving/loading files, viewing the choice history and some sample systems.",placement:"right",offset:390,disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#custom-file",title:"Loading Files",content:"You can open pre-made or saved SNP Systems files in XML format.",offset:45,placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#save-btn",title:"Saving Systems",content:"You can also save the current system you are working on. It will create an XML file.",offset:160,placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#choice-history-btn",title:"Choice History",content:"Here you can view a table containing the rules each neuron applied per timestep.",offset:90,placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},{target:"#file-dropdown",title:"Download Samples",content:"Lastly, you can download some of the sample SN P systems prepared here to start you off!",offset:65,placement:"right",disableBeacon:!0,disableOverlayClose:!0,floaterProps:{disableAnimation:!0}},(v={target:".websnapse-title",title:"Get Started",content:"And that's the end of the tutorial! Enjoy creating and simulating your own SN P systems!",placement:"center",disableBeacon:!0},Object(d.a)(v,"disableBeacon",!0),Object(d.a)(v,"floaterProps",{disableAnimation:!0}),v)];new Date,n(205),n(360),n(361),n(170),n(206),n(280);n(281);var P=n.p+"static/media/snp.e9efa255.png",x=n.p+"static/media/nsnp.e9c3d42a.png";var k=function(){return Object(f.jsxs)("div",{className:"welcome",children:[Object(f.jsxs)("div",{className:"greet",children:[Object(f.jsx)("h1",{children:"Welcome to WebSnapse 2.1"}),Object(f.jsx)("br",{}),Object(f.jsx)("p",{children:"a visual simulator for Spiking Neural Networks:"}),Object(f.jsx)("p",{children:"Please Hover on a side for specifications"})]}),Object(f.jsxs)("div",{className:"LinkContainer",children:[Object(f.jsxs)("div",{class:"divide-lside",children:["SN P Simulation",Object(f.jsxs)(l.b,{to:"/websnapse_extended/SNP",children:[Object(f.jsx)("img",{src:P,alt:""}),Object(f.jsx)("br",{}),Object(f.jsxs)("div",{class:"SNP",children:["-Traditional",Object(f.jsx)("br",{}),"-1:1 Node to number of Spikes",Object(f.jsx)("br",{}),"-Linear rules"]})]})]}),Object(f.jsxs)("div",{class:"divide-rside",children:["NSN P Simulation",Object(f.jsxs)(l.b,{to:"/websnapse_extended/NSNP",children:[Object(f.jsx)("img",{src:x,alt:""}),Object(f.jsx)("br",{}),Object(f.jsxs)("div",{className:"NSNP",children:["-1:Many Node to number of Spikes",Object(f.jsx)("br",{}),"-can contain non-linear rule functions",Object(f.jsx)("br",{})]})]})]})]})]})};n(282),n(72),n(160),n(196),n(197),n(68),n(364),n(369),n(371),n(372);var C=function(){return Object(f.jsx)(l.a,{children:Object(f.jsx)(c.d,{children:Object(f.jsx)(c.b,{path:"/",children:Object(f.jsx)(k,{})})})})},S=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,373)).then((function(t){var n=t.getCLS,o=t.getFID,a=t.getFCP,s=t.getLCP,i=t.getTTFB;n(e),o(e),a(e),s(e),i(e)}))},N=n(207),B=n.n(N),A=n(208),Y=n.n(A),_=n(209),I=n.n(_);n.p;h.a.use(Y.a),h.a.use(I.a),h.a.use(B.a),r.a.render(Object(f.jsx)(s.a.StrictMode,{children:Object(f.jsx)(C,{})}),document.getElementById("root")),S()}},[[317,1,2]]]);
//# sourceMappingURL=main.ba81f2f4.chunk.js.map