{"version":3,"sources":["components/SNP/stylesheet.js","components/Header/Header.jsx","components/Header/ComputingControls.jsx","components/SNP/Tour/Tour.js","pages/SNP/SNP.jsx","pages/Landing/snp.png","pages/Landing/nsnp.png","pages/Landing/LandingPage.js","App.js","reportWebVitals.js","fonts/Peace Sans.otf","index.js"],"names":["_style","_defineProperty","progBarRate","shortening","keyframes","_templateObject","_taggedTemplateLiteral","styled","div","_templateObject2","props","isPlaying","css","_templateObject3","ComputingControls","TOUR_STEPS","target","title","content","placement","disableBeacon","disableOverlayClose","floaterProps","disableAnimation","offset","_ref","Date","SNP","LandingPage","_jsxs","className","children","_jsx","class","Link","to","src","snppic","alt","nsnppic","App","Router","Switch","Route","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cytoscape","use","edgehandles","gridGuide","popper","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"gfA2HSA,EAAA,CACH,aAAc,UACd,aAAc,SACd,qBAAsB,WAASC,YAAAD,EAAC,aAClB,WAASC,YAAAD,EAAC,aACV,UAAQC,YAAAD,EAAC,qBACD,WAASC,YAAAD,EAAC,QACzB,GAACC,YAAAD,EACR,mBAAoB,GAACC,YAAAD,EACrB,oBAAqB,CAAC,GAAI,IAAEC,YAAAD,EAC5B,cAAe,K,2OClGjBE,EAAc,EAmNlB,IAAMC,EAAaC,YAASC,MAAAC,YAAA,sFAURC,IAAOC,IAAGC,MAAAH,YAAA,wHAC1B,SAACI,GAAK,OACNA,EAAMC,WACNC,YAAGC,MAAAP,YAAA,gDACYH,EAAcD,M,kCCjKlBY,I,EC/FTC,EAAa,CACjB,CACEC,OAAQ,mBACRC,MAAO,wBACPC,QACE,oFACFC,UAAW,SACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAetB,CACEP,OAAQ,gBACRC,MAAO,WACPC,QACE,2JACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAItB,CACEP,OAAQ,gBACRC,MAAO,iBACPC,QACE,mXACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,iBACRC,MAAO,iBACPC,QACE,sPACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,kBACRC,MAAO,kBACPC,QACE,mPACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,gBACRC,MAAO,cACPC,QACE,+SACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,iBACRC,MAAO,oBACPC,QACE,mRACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,qBACRC,MAAO,kBACPC,QACE,+RACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAItB,CACEP,OAAQ,gBACRC,MAAO,eACPC,QACE,iNACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,eACRC,MAAO,iBACPC,QACE,6JACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,iBACRC,MAAO,YACPC,QACE,gKACFC,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAItB,CACEP,OAAQ,iCACRC,MAAO,gBACPC,QACE,mVACFC,UAAW,eACXK,QAAS,IACTJ,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,iCACRC,MAAO,iBACPC,QACE,sMACFC,UAAW,eACXK,QAAS,IACTJ,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,mBACRC,MAAO,0BACPC,QACE,4LACFC,UAAW,SACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,mBACRC,MAAO,0BACPC,QACE,uMACFC,UAAW,SACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,gBACRC,MAAO,0BACPC,QACE,iQACFC,UAAW,SACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,WACRC,MAAO,qBACPC,QACE,4EACFC,UAAW,SACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,oBACRC,MAAO,8BACPC,QACE,iXACFC,UAAW,SACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,yBACRC,MAAO,eACPC,QACE,8HACFC,UAAW,QACXK,OAAQ,IACRJ,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,eACRC,MAAO,gBACPC,QAAS,kEACTM,OAAQ,GACRL,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,YACRC,MAAO,iBACPC,QACE,uFACFM,OAAQ,IACRL,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,sBACRC,MAAO,iBACPC,QACE,mFACFM,OAAQ,GACRL,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,IAGtB,CACEP,OAAQ,iBACRC,MAAO,mBACPC,QACE,2FACFM,OAAQ,GACRL,UAAW,QACXC,eAAe,EACfC,qBAAqB,EACrBC,aAAc,CACZC,kBAAkB,KAErBE,EAAA,CAECT,OAAQ,mBACRC,MAAO,cACPC,QACE,2FACFC,UAAW,SACXC,eAAe,GAAInB,YAAAwB,EAAC,iBACL,GAAIxB,YAAAwB,EAAC,eACN,CACZF,kBAAkB,IACnBE,IAME,IAAIC,K,iDC8hBIC,IC51BA,MAA0B,gCCA1B,MAA0B,iCC6C1BC,MAzCf,WACE,OACEC,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,MAAAD,SAAI,6BACJC,cAAA,SACAA,cAAA,KAAAD,SAAG,oDACHC,cAAA,KAAAD,SAAG,iDAELF,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC5BF,eAAA,OAAKI,MAAM,eAAcF,SAAA,CAAC,kBAExBF,eAACK,IAAI,CAACC,GAAG,0BAAyBJ,SAAA,CAChCC,cAAA,OAAKI,IAAKC,EAAQC,IAAI,KACtBN,cAAA,SACAH,eAAA,OAAKI,MAAM,MAAKF,SAAA,CAAC,eAEfC,cAAA,SAAM,gCAENA,cAAA,SAAM,yBAKZH,eAAA,OAAKI,MAAM,eAAcF,SAAA,CAAC,mBAExBF,eAACK,IAAI,CAACC,GAAG,2BAA0BJ,SAAA,CACjCC,cAAA,OAAKI,IAAKG,EAASD,IAAI,KACvBN,cAAA,SACAH,eAAA,OAAKC,UAAU,OAAMC,SAAA,CAAC,mCAEpBC,cAAA,SAAM,yCAENA,cAAA,yB,oECtBCQ,MAXf,WACE,OACER,cAACS,IAAM,CAAAV,SACLC,cAACU,IAAM,CAAAX,SACLC,cAACW,IAAK,CAACC,KAAK,IAAGb,SACbC,cAACJ,EAAW,WCGPiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,SAAAvB,GAAkD,IAA/CwB,EAAMxB,EAANwB,OAAQC,EAAMzB,EAANyB,OAAQC,EAAM1B,EAAN0B,OAAQC,EAAM3B,EAAN2B,OAAQC,EAAO5B,EAAP4B,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sDCPC,ICUfQ,IAAUC,IAAIC,KACdF,IAAUC,IAAIE,KACdH,IAAUC,IAAIG,KACdC,IAASC,OACP5B,cAAC6B,IAAMC,WAAU,CAAA/B,SACfC,cAACQ,EAAG,MAENuB,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.ba81f2f4.chunk.js","sourcesContent":["const styles = [\n  {\n    selector: \".snapse-node, .snapse-output, .snapse-input\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"padding-top\": \"0\",\n      \"border-width\": 0,\n      \"text-halign\": \"left\",\n      \"text-valign\": \"top\",\n      color: \"black\",\n      content: \"data(label)\",\n    },\n  },\n  {\n    selector: \".snapse-node__closed\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"padding-top\": \"0\",\n      \"border-width\": 0,\n      \"text-halign\": \"left\",\n      \"text-valign\": \"top\",\n      \"background-color\": \"gray\",\n      color: \"black\",\n      content: \"data(label)\",\n    },\n  },\n  {\n    selector: \".snapse-node__rules, .snapse-node__output, .snapse-node__input\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"font-style\": \"italic\",\n      \"background-color\": \"white\",\n      \"border-width\": 1,\n      events: \"no\",\n      \"text-wrap\": \"wrap\",\n      \"text-max-width\": \"100px\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      content: \"data(label)\",\n      height: 150,\n      shape: \"roundrectangle\",\n      width: 100,\n    },\n  },\n  {\n    selector: \".snapse-node__rules__closed\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"font-style\": \"italic\",\n      \"background-color\": \"gray\",\n      \"border-width\": 3,\n      events: \"no\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      \"text-wrap\": \"wrap\",\n      \"text-max-width\": \"100px\",\n      content: \"data(label)\",\n      height: 150,\n      shape: \"roundrectangle\",\n      width: 100,\n    },\n  },\n  {\n    selector: \".snapse-node__time, .snapse-node__spike\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      content: \"data(label)\",\n      events: \"no\",\n      height: 15,\n      shape: \"roundrectangle\",\n      width: 50,\n    },\n  },\n  {\n    selector: \".snapse-node__time__closed, .snapse-node__spike__closed\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      content: \"data(label)\",\n      events: \"no\",\n      height: 15,\n      shape: \"roundrectangle\",\n      width: 50,\n    },\n  },\n  /*     {\n            selector: 'node',\n            style: {\n                'background-opacity': '0',\n                'padding-top': '0',\n                'text-halign': 'left',\n                'text-valign': 'top',\n                color: 'black',\n                content: 'data(label)',\n                'border-width': 1,\n                events: 'no',\n                'text-wrap': 'wrap',\n                shape: 'roundrectangle'\n            }\n        }, */\n  {\n    selector: \"edge\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"curve-style\": \"bezier\",\n      \"target-arrow-shape\": \"triangle\",\n      \"text-background-color\": \"white\",\n      \"text-background-shape\": \"rectangle\",\n      width: 1,\n      // content: 'data(label)',\n      // 'text-halign': 'center',\n      // 'text-valign': 'top',\n    },\n  },\n  {\n    selector: \".edge--triggering\",\n    style: {\n      \"line-color\": \"magenta\",\n      \"line-style\": \"dashed\",\n      \"target-arrow-color\": \"magenta\",\n      \"line-color\": \"magenta\",\n      \"line-style\": \"dashed\",\n      \"target-arrow-color\": \"magenta\",\n      width: 4,\n      \"line-dash-offset\": 3,\n      \"line-dash-pattern\": [15, 3],\n      \"arrow-scale\": 1.5,\n    },\n    // content: 'data(label)',\n    // 'text-halign': 'center',\n    // 'text-valign': 'top',\n  },\n  {\n    selector: \"edge[label]\",\n    css: {\n      label: \"data(label)\",\n      \"text-rotation\": \"autorotate\",\n      \"text-margin-x\": \"0px\",\n      \"text-margin-y\": \"0px\",\n      \"text-background-opacity\": 1,\n      \"font-weight\": \"bold\",\n      \"font-size\": 18,\n    },\n  },\n];\nexport default styles;\n","import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Slider from \"@mui/material/Slider\";\nimport {\n  Button,\n  Container,\n  Alert,\n  Row,\n  Col,\n  Form,\n  OverlayTrigger,\n  Tooltip,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\nimport {\n  ArrowCounterclockwise,\n  PlayFill,\n  PauseFill,\n  SkipForwardFill,\n  SkipBackwardFill,\n  QuestionCircle,\n  ClockFill,\n  ClockHistory,\n  PlusSquare,\n  Save2,\n  Sliders,\n  XCircle,\n  PencilSquare,\n  BoxArrowRight,\n  BoxArrowInRight,\n} from \"react-bootstrap-icons\";\nimport styled, { css, keyframes } from \"styled-components\";\n\nvar progBarRate = 3;\n\nfunction MainHeader(props) {\n  const [sld_value, setSldValue] = useState(1);\n\n  const renderTooltip = (props) => (\n    <Tooltip id=\"button-tooltip\" {...props}>\n      Pseudorandom mode will allow the system to decide which rule will be\n      executed. Guided mode will let you be the one to decide.\n    </Tooltip>\n  );\n\n  const handleSelect = (e) => {\n    console.log(e);\n    props.setMode(e);\n  };\n\n  const handlePlay = () => {\n    if (!props.hasEnded) {\n      props.setIsPlaying((p) => !p);\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  };\n\n  const onNullForward = async () => {\n    if (props.time == 0) {\n      //copy\n      console.log(\"NULL_FORWARD\");\n\n      window.localStorage.setItem(\n        \"originalNeurons\",\n        JSON.stringify(JSON.parse(JSON.stringify(props.neurons)))\n      );\n    }\n  };\n\n  const handleSldChange = (event, newValue) => {\n    if (props.isPlaying) {\n      props.setIsPlaying(false);\n    }\n    setSldValue(newValue);\n    var sim_spd = 3000 / newValue;\n    progBarRate = sim_spd / 1000;\n  };\n\n  function resetSlider() {\n    if (props.isPlaying) {\n      props.setIsPlaying(false);\n    }\n    setSldValue(1);\n  }\n\n  useEffect(() => {\n    var simu_speed = 3000 / sld_value;\n    progBarRate = simu_speed / 1000;\n    console.log(\"Simu speed\", simu_speed);\n    if (props.isPlaying) {\n      var interval = setInterval(() => {\n        props.onIntervalStepRef.current();\n      }, simu_speed); /// simulation speed\n    }\n    return () => clearInterval(interval);\n  }, [props.isPlaying, props.onIntervalStepRef]);\n\n  return (\n    <div>\n      <div style={{ textAlign: \"center\" }}>\n        <h1 style={{ fontWeight: \"700\" }} className=\"websnapse-title\">\n          WebSnapse\n        </h1>\n      </div>\n\n      <Row>\n        <Col>\n          <div>\n            <Form>\n              <Form.Group id=\"formGridCheckbox\">\n                <Row>\n                  <Col sm={8}>\n                    <div>\n                      <DropdownButton\n                        id=\"simu-mode\"\n                        title={\"Simulation Mode: \" + props.mode}\n                        onSelect={handleSelect}\n                      >\n                        <Dropdown.Item\n                          eventKey=\"GUIDED\"\n                          onClick={() => props.setIsRandom(false)}\n                        >\n                          GUIDED\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          eventKey=\"PSEUDORANDOM\"\n                          onClick={() => props.setIsRandom(true)}\n                        >\n                          PSEUDORANDOM\n                        </Dropdown.Item>\n                      </DropdownButton>\n                    </div>\n\n                    {/* <Form.Check type=\"checkbox\"\n                              label=\"Pseudorandom Mode\"\n                              defaultChecked={isRandom}\n                              onChange={() => {\n                                setIsRandom(!isRandom)\n                              }} /> */}\n                  </Col>\n                  {/* Question Mark Tooltip for Simulation Mode */}\n                  <Col sm={8} style={{ textAlign: \"left\" }}>\n                    <OverlayTrigger\n                      placement=\"right\"\n                      delay={{ show: 250, hide: 400 }}\n                      overlay={renderTooltip}\n                    >\n                      <QuestionCircle />\n                    </OverlayTrigger>\n                  </Col>\n                </Row>\n              </Form.Group>\n            </Form>\n            {props.time == 0 ? (\n              <div></div>\n            ) : (\n              <div\n                style={{\n                  backgroundColor: \"#778beb\",\n                  color: \"white\",\n                  borderRadius: \"10px\",\n                  padding: \"0.5em\",\n                }}\n              >\n                <ClockFill color=\"white\" size={30} /> <strong>Time:</strong>{\" \"}\n                {props.time == 0 ? \"Start playing!\" : props.time}\n              </div>\n            )}\n          </div>\n        </Col>\n        {/* Simulation Controls */}\n        <Col>\n          <div\n            className=\"snapse-controls\"\n            style={{ textAlign: \"center\", marginBottom: \"0.8em\" }}\n          >\n            <Button variant=\"link\" onClick={() => props.onBackward()}>\n              <SkipBackwardFill />\n            </Button>{\" \"}\n            <div style={{ display: \"inline-block\" }}>\n              <ProgressBar key={props.pBar} isPlaying={props.isPlaying} />\n              <Button\n                size=\"lg\"\n                className=\"snapse-controls-play\"\n                onClick={handlePlay}\n              >\n                {props.isPlaying ? <PauseFill /> : <PlayFill />}\n              </Button>\n            </div>{\" \"}\n            <Button variant=\"link\" onClick={() => props.onForward()}>\n              <SkipForwardFill />\n            </Button>{\" \"}\n            <Button\n              hidden={true}\n              id=\"forwardBtn\"\n              variant=\"link\"\n              onClick={() => onNullForward()}\n            >\n              <SkipForwardFill />\n            </Button>{\" \"}\n          </div>\n        </Col>\n\n        {/* Speed Slider */}\n        <Col style={{ textAlign: \"right\" }}>\n          <div\n            id=\"speed-slider\"\n            style={{\n              backgroundColor: \"#786fa6\",\n              borderRadius: \"10px\",\n              padding: \"0.5em\",\n            }}\n          >\n            <h6 className=\"slider-title\" style={{ textAlign: \"center\" }}>\n              <Sliders /> Simulation Speed\n              <Button\n                size=\"sm\"\n                variant=\"light\"\n                style={{ float: \"right\" }}\n                onClick={resetSlider}\n              >\n                Reset to 1x\n              </Button>{\" \"}\n            </h6>\n\n            <Slider\n              aria-label=\"simuSpeed\"\n              color=\"secondary\"\n              min={0.1}\n              max={3.0}\n              step={0.1}\n              defaultValue={1}\n              value={sld_value}\n              onChange={handleSldChange}\n              valueLabelDisplay=\"auto\"\n              valueLabelFormat={sliderThumbLabelFormat}\n            />\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\nconst shortening = keyframes`\nfrom {\n  transform: scaleX(100%);\n}\n\nto {\n  transform: scaleX(0%);\n}\n`;\n\nconst ProgressBar = styled.div`\n  ${(props) =>\n    props.isPlaying &&\n    css`\n      animation: ${shortening} ${progBarRate}s linear;\n    `}\n  background-color: #c44569;\n  height: 4px;\n  transform-origin: left center;\n  margin-bottom: 2px;\n`;\n\nfunction sliderThumbLabelFormat(value) {\n  return `${value}x`;\n}\nexport default MainHeader;\n","import React from \"react\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport {\n  ArrowCounterclockwise,\n  PlusSquare,\n  XCircle,\n  PencilSquare,\n  BoxArrowRight,\n  BoxArrowInRight,\n} from \"react-bootstrap-icons\";\n\nfunction ComputingControls(props) {\n  return (\n    <div>\n      <Row>\n        <Col sm={8}>\n          <Button\n            variant=\"outline-dark\"\n            size=\"md\"\n            id=\"new-node-btn\"\n            className=\"node-actions text-primary\"\n            onClick={props.handleShow}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <PlusSquare /> New Node\n          </Button>\n          <Button\n            variant=\"outline-dark\"\n            size=\"md\"\n            id=\"new-input-btn\"\n            className=\"node-actions text-primary\"\n            onClick={props.handleShowNewInputModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <BoxArrowInRight /> New Input Node\n          </Button>\n          <Button\n            variant=\"outline-dark\"\n            size=\"md\"\n            id=\"new-output-btn\"\n            className=\"node-actions text-primary\"\n            onClick={props.handleShowNewOutputModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <BoxArrowRight /> New Output Node\n          </Button>\n          <Button\n            variant=\"outline-primary\"\n            size=\"md\"\n            id=\"del-node-btn\"\n            className=\"node-actions text-danger\"\n            onClick={props.handleShowDeleteModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <XCircle /> Delete Node\n          </Button>\n          <Button\n            variant=\"outline-primary\"\n            size=\"md\"\n            id=\"edit-node-btn\"\n            className=\"node-actions text-success\"\n            onClick={props.handleShowEditModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <PencilSquare /> Edit Regular Node\n          </Button>\n\n          <Button\n            variant=\"outline-primary\"\n            size=\"md\"\n            id=\"edit-inp-node-btn\"\n            className=\"node-actions text-success\"\n            onClick={props.handleShowEditInputModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <PencilSquare /> Edit Input Node\n          </Button>\n        </Col>\n        <Col sm={4} style={{ textAlign: \"right\" }}>\n          <Button\n            id=\"res-btn\"\n            variant=\"danger\"\n            onClick={props.handleReset}\n            style={{ textAlign: \"center\", marginTop: \"0.4em\" }}\n          >\n            <ArrowCounterclockwise /> Restart Simulation\n          </Button>{\" \"}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default ComputingControls;\n","import React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\n\n// Tour steps\nconst TOUR_STEPS = [\n  {\n    target: \".websnapse-title\",\n    title: \"Welcome to WebSnapse!\",\n    content:\n      \"This is a visual simulator to aid in the creation and simulation of SN P systems.\",\n    placement: \"center\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  /*{\n      target: \"#dropdown-basic\",\n      title: \"Node Actions\",\n      content: \"Here we can find several actions you can do to create your SN P system.\",\n      placement: 'right',\n      offset: 30,\n      disableBeacon: true,\n      disableOverlayClose: true,\n      floaterProps: {\n        disableAnimation: true,\n      }\n  },*/\n  {\n    target: \"#new-node-btn\",\n    title: \"New Node\",\n    content:\n      \"You can create a new neuron here. You will then be prompted to give it a label name, rules and the number of spikes the neuron should initially contain.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  ///(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n  {\n    target: \"#new-node-btn\",\n    title: \"Creating Rules\",\n    content:\n      \"When writing rules, it should follow the format E/c->p;d, where E follows the regular expression (na)(+***) with n equal to the number of spikes required, c is na with c equal to the number of spikes to be consumed, p is na with c equal to the number of spikes to be produced and d equal to the delay. If creating a forgetting rule, set p to 0. Example: 2a(a)+/2a->0;0\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#new-input-btn\",\n    title: \"New Input Node\",\n    content:\n      \"You can also create input neurons to send spikes to connected neurons in your system. Input neurons have spike trains made up of numbers separated by commas, with each representing the number of spikes the input neuron sends at the given time.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#new-output-btn\",\n    title: \"New Output Node\",\n    content:\n      \"You can also create output neurons to receive the output of your system in the form of a spike train (string) composed of numbers separated by commas, with each representing the number of spikes the output neuron receives at the given time.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#del-node-btn\",\n    title: \"Delete Node\",\n    content:\n      \"You can delete a neuron by choosing the neuron ID of the neuron you would like to delete. The neurons are ordered from oldest to last added. Deleting a neuron will also delete the synapses connected to the neuron. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#edit-node-btn\",\n    title: \"Edit Regular Node\",\n    content:\n      \"You can edit a neuron by choosing the neuron ID of the neuron you would like to edit. The neurons are ordered from oldest to last added. You can edit the rules and spikes of the neuron. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#edit-inp-node-btn\",\n    title: \"Edit Input Node\",\n    content:\n      \"You can edit an input neuron by choosing the neuron ID of the neuron you would like to edit. The neurons are ordered from oldest to last added. You can edit the spike train/bitstring of the neuron. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n\n  {\n    target: \"#edit-syn-btn\",\n    title: \"Edit Synapse\",\n    content:\n      \"You can edit a synapse by first clicking the synapse you want to edit. You can edit the weight of the selected synapse. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#del-syn-btn\",\n    title: \"Delete Synapse\",\n    content:\n      \"You can delete a synapse by first clicking the synapse you want to delete. You can choose to cancel or apply the deletion, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#clear-all-btn\",\n    title: \"Clear All\",\n    content:\n      \"You can clear your workspace and delete all elements by clicking this button. You can choose to cancel or apply the deletion, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n\n  {\n    target: \".__________cytoscape_container\",\n    title: \"The Workspace\",\n    content:\n      \"After adding a neuron, you will be able to see a visual representation here.  Inside each neuron, you will find the number of spikes the neuron has at the top, and its rules at the center. Below the neuron, you will find the current delay timer before the neuron spikes. By default, this is set to 0 and a neuron is set to spike at -1. \",\n    placement: \"bottom-start\",\n    offset: -400,\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".__________cytoscape_container\",\n    title: \"Creating Edges\",\n    content:\n      \"To create s or edges,  hover over the source node or neuron then a grey circle will appear and you can drag that to see a directed arrow that you can connect to your desired next node or neuron. \",\n    placement: \"bottom-start\",\n    offset: -400,\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".snapse-controls\",\n    title: \"Starting the Simulation\",\n    content:\n      \"Now it's time for simulations! You can simulate the system one step at a time by using the forward button. You can use the backward button to revert the system to the previous timestep.\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".snapse-controls\",\n    title: \"Starting the Simulation\",\n    content:\n      \"You can also simulate the system continuously by clicking the play button. It will then proceed to go step-by-step at default 3 second intervals until the simulation is paused or the system halts.\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#speed-slider\",\n    title: \"Simulation Speed Slider\",\n    content:\n      \"You can change the speed of the continuous simulation through this slider. Drag the slider thumb to the left to slow the simulation down. Drag it to the right to speed the simulation up. Click 'Reset to 1x' to reset to default speed (3 second intervals).\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#res-btn\",\n    title: \"Restart Simulation\",\n    content:\n      \"Click this button to restart your simulation from the top (timestep = 0).\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#formGridCheckbox\",\n    title: \"Pseudorandom or Guided Mode\",\n    content:\n      \"If your system contains points of non-determinism, or rather, if a neuron can execute more than one rule at a time, you can choose to set the simulation to pseudorandom or guided mode. When using pseudorandom mode, the system chooses what rule to execute. When using guided mode, you will be prompted to choose which rule the neuron should follow for that timestep. \",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#react-burger-menu-btn\",\n    title: \"Menu Actions\",\n    content:\n      \"In this menu, you will find other actions such as saving/loading files, viewing the choice history and some sample systems.\",\n    placement: \"right\",\n    offset: 390,\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#custom-file\",\n    title: \"Loading Files\",\n    content: \"You can open pre-made or saved SNP Systems files in XML format.\",\n    offset: 45,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#save-btn\",\n    title: \"Saving Systems\",\n    content:\n      \"You can also save the current system you are working on. It will create an XML file.\",\n    offset: 160,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#choice-history-btn\",\n    title: \"Choice History\",\n    content:\n      \"Here you can view a table containing the rules each neuron applied per timestep.\",\n    offset: 90,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#file-dropdown\",\n    title: \"Download Samples\",\n    content:\n      \"Lastly, you can download some of the sample SN P systems prepared here to start you off!\",\n    offset: 65,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".websnapse-title\",\n    title: \"Get Started\",\n    content:\n      \"And that's the end of the tutorial! Enjoy creating and simulating your own SN P systems!\",\n    placement: \"center\",\n    disableBeacon: true,\n    disableBeacon: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n];\n\n// Initial state for the tour component\nconst INITIAL_STATE = {\n  key: new Date(), // This field makes the tour to re-render when we restart the tour\n  run: false,\n  continuous: true, // Show next button\n  loading: false,\n  stepIndex: 0, // Make the component controlled\n  steps: TOUR_STEPS,\n};\n\n// Reducer will manage updating the local state\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    // start the tour\n    case \"START\":\n      return { ...state, run: true };\n    // Reset to 0th step\n    case \"RESET\":\n      return { ...state, stepIndex: 0 };\n    // Stop the tour\n    case \"STOP\":\n      return { ...state, run: false };\n    // Update the steps for next / back button click\n    case \"NEXT_OR_PREV\":\n      return { ...state, ...action.payload };\n    // Restart the tour - reset go to 1st step, restart create new tour\n    case \"RESTART\":\n      return {\n        ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date(),\n      };\n    default:\n      return state;\n  }\n};\n// styles\n\nconst styles = {\n  beaconInner: {\n    backgroundColor: \"#786fa6\",\n  },\n  tooltip: {\n    backgroundColor: \"#fff\",\n    textColor: \"#333\",\n    fontSize: 14,\n  },\n  tooltipContainer: {\n    textAlign: \"center\",\n  },\n  tooltipTitle: {\n    fontSize: 17,\n    margin: \"0 0 0 0\",\n  },\n  buttonNext: {\n    backgroundColor: \"#786fa6\",\n  },\n  buttonBack: {\n    color: \"#786fa6\",\n  },\n  buttonSkip: {\n    color: \"#786fa6\",\n  },\n  overlay: {\n    backgroundColor: \"rgba(0,0,0, 0.7)\",\n    mixBlendMode: \"multiply\",\n  },\n  spotlightLegacy: {\n    boxShadow: `0 0 10 5 rgba(0,0,0, 0.5), 0 0 15px rgba(0, 0, 0, 0.3)`,\n  },\n  floater: {\n    arrow: {\n      color: \"#fff\",\n    },\n    tooltip: {\n      zIndex: 100,\n    },\n  },\n};\n\n// Tour component\nconst Tour = ({\n  handleShowSideBarMenu,\n  handleCloseSideBarMenu,\n  restartTutorial,\n  handleFalseRestartTutorial,\n}) => {\n  // Tour state is the state which control the JoyRide component\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  useEffect(() => {\n    // Auto start the tour if the tour is not viewed before\n    if (!localStorage.getItem(\"tour\")) {\n      dispatch({ type: \"START\" });\n    }\n  }, []);\n\n  // Set once tour is viewed, skipped or closed\n  const setTourViewed = () => {\n    localStorage.setItem(\"tour\", \"1\");\n  };\n\n  const callback = (data) => {\n    const { action, index, type, status } = data;\n\n    if (\n      // If close button clicked, then close the tour\n      action === ACTIONS.CLOSE ||\n      // If skipped or end tour, then close the tour\n      (status === STATUS.SKIPPED && tourState.run) ||\n      status === STATUS.FINISHED\n    ) {\n      dispatch({ type: \"STOP\" });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      // Check whether next or back button click and update the step.\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: { stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) },\n      });\n    } else if (index === 0) {\n      handleCloseSideBarMenu();\n    } else if (index === 1) {\n      handleFalseRestartTutorial();\n    } else if (index === 1 && action === ACTIONS.PREV) {\n    } else if (index === 7) {\n    } else if (index === 18) {\n      handleShowSideBarMenu();\n    } else if (index === 23) {\n      handleCloseSideBarMenu();\n      setTourViewed();\n    }\n  };\n\n  const startTour = () => {\n    // Start the tour manually\n    dispatch({ type: \"RESTART\" });\n  };\n\n  useEffect(() => {\n    if (restartTutorial == true) {\n      startTour();\n    }\n  }, [restartTutorial]);\n\n  return (\n    <>\n      <JoyRide\n        {...tourState}\n        // Callback will pass all the actions\n        callback={callback}\n        scrollToFirstStep={true}\n        showSkipButton={true}\n        hideBackButton={false}\n        showProgress={true}\n        continuous={true}\n        styles={styles}\n        locale={{\n          last: \"End tour\",\n          skip: \"Skip tour\",\n        }}\n      />\n    </>\n  );\n};\n\nexport default Tour;\n","import \"../../scss/custom.scss\";\nimport \"./SNP.css\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { Container, Alert } from \"react-bootstrap\";\nimport Snapse from \"../../components/SNP/Snapse/Snapse\";\nimport { step, backStep, parseRule, null_step } from \"../../utils/automata\";\nimport ElementPopUp from \"../../components/SNP/forms/ElementPopUp\";\nimport ChooseRuleForm from \"../../components/SNP/forms/ChooseRuleForm\";\nimport NewNodeForm from \"../../components/SNP/forms/NewNodeForm\";\nimport AddSynapseWeightForm from \"../../components/SNP/forms/AddSynapseWeightForm\";\nimport NewOutputNodeForm from \"../../components/SNP/forms/NewOutputNodeForm\";\nimport NewInputNodeForm from \"../../components/SNP/forms/NewInputNodeForm\";\nimport EditNodeForm from \"../../components/SNP/forms/EditNodeForm\";\nimport EditInputNodeForm from \"../../components/SNP/forms/EditInputNodeForm\";\nimport EditSynapseForm from \"../../components/SNP/forms/EditSynapseForm\";\nimport DeleteNodeForm from \"../../components/SNP/forms/DeleteNodeForm\";\nimport DeleteAllForm from \"../../components/SNP/forms/DeleteAllForm\";\nimport DeleteSynapseForm from \"../../components/SNP/forms/DeleteSynapseForm\";\n\nimport ChoiceHistory from \"../../components/SNP/ChoiceHistory/ChoiceHistory\";\n\nimport useUnsavedChanges from \"../../components/SNP/useUnsavedChanges/useUnsavedChanges\";\nimport MainHeader from \"../../components/Header/Header\";\nimport ComputingControls from \"../../components/Header/ComputingControls\";\nimport Tour from \"../../components/SNP/Tour/Tour\";\nimport Menu from \"../../components/Menu/Menu\";\n\nvar isClickedSynapse = false;\nvar isHover = true;\nvar srcDel = \"\";\nvar dstDel = \"\";\n\nfunction useKey(key, cb) {\n  const isFocus = useRef(false);\n  const callbackRef = useRef(cb);\n\n  const inputs = document.getElementsByTagName(\"input\");\n\n  // if user is typing in input elements, isFocus = true, and keybinds should not work\n  useEffect(() => {\n    for (let input of inputs) {\n      input.addEventListener(\"focusin\", () => {\n        isFocus.current = true;\n        console.log(\"fOCUS ON ME\");\n      });\n      input.addEventListener(\"input\", () => {\n        isFocus.current = true;\n        console.log(\"fOCUS ON ME 2\");\n      });\n      input.addEventListener(\n        \"focus\",\n        () => {\n          isFocus.current = true;\n          console.log(\"fOCUS ON ME 3\");\n        },\n        true\n      );\n      input.addEventListener(\"focusout\", () => {\n        isFocus.current = false;\n      });\n    }\n  });\n\n  useEffect(() => {\n    callbackRef.current = cb;\n  });\n  useEffect(() => {\n    function debounced(delay, fn) {\n      let timerId;\n      return function (...args) {\n        if (timerId) {\n          clearTimeout(timerId);\n        }\n        timerId = setTimeout(() => {\n          fn(...args);\n          timerId = null;\n        }, delay);\n      };\n    }\n\n    function handleKeyDown(event) {\n      console.log(`isFocus ${isFocus.current}`);\n      if (event.code === key && isFocus.current == false) {\n        console.log(`handleKeyDown isFocus: ${isFocus.current}`);\n        //event.preventDefault();\n        console.log(\"Key pressed: \" + event.code);\n        callbackRef.current(event);\n      }\n    }\n\n    document.addEventListener(\"keydown\", (event) => {\n      if (event.code === \"Space\" && isFocus == false) {\n        event.preventDefault();\n      }\n    });\n    document.addEventListener(\"keydown\", debounced(300, handleKeyDown));\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [key]);\n}\n\nfunction SNP() {\n  const [neurons, setNeurons] = useImmer(\n    window.localStorage.getItem(\"originalNeurons\") != null\n      ? JSON.parse(window.localStorage.getItem(\"originalNeurons\"))\n      : {\n          n1: {\n            id: \"n1\",\n            position: { x: 50, y: 50 },\n            rules: \"a+/a->a;2\",\n            startingSpikes: 1,\n            delay: 0,\n            spikes: 1,\n            isOutput: false,\n            isInput: false,\n            out: [\"n2\"],\n            outWeights: { n2: 1 },\n          },\n          n2: {\n            id: \"n2\",\n            position: { x: 200, y: 50 },\n            rules: \"a/a->a;1\",\n            startingSpikes: 0,\n            delay: 0,\n            spikes: 0,\n            isOutput: false,\n            isInput: false,\n            out: [\"n3\"],\n            outWeights: { n3: 1 },\n          },\n          n3: {\n            id: \"n3\",\n            position: { x: 400, y: 50 },\n            rules: \"a/a->a;0\",\n            startingSpikes: 1,\n            delay: 0,\n            spikes: 1,\n            isOutput: false,\n            isInput: false,\n            out: [\"n4\"],\n            outWeights: { n4: 1 },\n          },\n          n4: {\n            id: \"n4\",\n            position: { x: 400, y: 200 },\n            isOutput: true,\n            isInput: false,\n            spikes: 0,\n            bitstring: \" \",\n          },\n        }\n  );\n\n  // States\n\n  const [srce, setSrce] = useState(\"\");\n  const [dest, setDest] = useState(\"\");\n  const [time, setTime] = useState(0);\n  const [nodeID, setNeuronID] = useState(\"\");\n  const [nodeType, setNeuronType] = useState(\"\");\n  const [nodeSRules, setNeuronSRules] = useState(\"\");\n  const [nodeFRules, setNeuronFRules] = useState(\"\");\n  const [nodeSpikes, setNeuronSpikes] = useState(\"\");\n  const [nodeBitstring, setNeuronBitstring] = useState(\"\");\n  const [weight_main, setWeight] = useState(1);\n  const [isRandom, setIsRandom] = useState(true);\n  const [Prompt, setDirty, setPristine] = useUnsavedChanges();\n  // Modal Booleans\n  const [showElementPopup, setShowElementPopup] = useState(false);\n  const [showAddWeightModal, setShowAddWeightModal] = useState(false);\n  const [showNewNodeModal, setShowNewNodeModal] = useState(false);\n  const [showNewOutputModal, setShowNewOutputModal] = useState(false);\n  const [showNewInputModal, setShowNewInputModal] = useState(false);\n  const [showChooseRuleModal, setShowChooseRuleModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showEditInputModal, setShowEditInputModal] = useState(false);\n  const [showEditSynapseModal, setShowEditSynapseModal] = useState(false);\n  const [showChoiceHistoryModal, setShowChoiceHistoryModal] = useState(false);\n  const [showDeleteAllModal, setShowDeleteAllModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showDeleteSynapseModal, setShowDeleteSynapseModal] = useState(false);\n  // Menu Booleans\n  const [showSideBarMenu, setShowSideBarMenu] = useState(false);\n  // Simulation Booleans\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [hasEnded, setHasEnded] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [pBar, setPBar] = useState(0);\n  const headless = process.env.NODE_ENV === \"test\";\n  const [sld_value, setSldValue] = useState(1);\n\n  const handleSldOver = () => console.log(\"slide over\");\n  const handleClose = () => setShowNewNodeModal(false);\n  const handleShow = () => setShowNewNodeModal(true);\n  const handleCloseElementPopup = () => setShowElementPopup(false);\n  const handleShowElementPopup = () => setShowElementPopup(true);\n  const handleCloseAddWeightModal = () => setShowAddWeightModal(false);\n  const handleShowAddWeightModal = () => setShowAddWeightModal(true);\n  const handleCloseNewOutputModal = () => setShowNewOutputModal(false);\n  const handleShowNewOutputModal = () => setShowNewOutputModal(true);\n  const handleCloseNewInputModal = () => setShowNewInputModal(false);\n  const handleShowNewInputModal = () => setShowNewInputModal(true);\n  const handleCloseEditModal = () => setShowEditModal(false);\n  const handleShowEditInputModal = () => setShowEditInputModal(true);\n  const handleCloseEditInputModal = () => setShowEditInputModal(false);\n  const handleCloseEditSynapseModal = () => setShowEditSynapseModal(false);\n  const handleShowEditSynapseModal = () => setShowEditSynapseModal(true);\n  const handleShowEditModal = () => setShowEditModal(true);\n  const handleCloseDeleteAllModal = () => setShowDeleteAllModal(false);\n  const handleShowDeleteAllModal = () => setShowDeleteAllModal(true);\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n  const handleCloseDeleteSynapseModal = () => setShowDeleteSynapseModal(false);\n  const handleShowDeleteSynapseModal = () => {\n    console.log(\"SHOW DELSYN\");\n    setShowDeleteSynapseModal(true);\n  };\n  const handleCloseChooseRuleModal = () => setShowChooseRuleModal(false);\n\n  const [mode, setMode] = useState(\"PSEUDORANDOM\");\n\n  // Menu Handles\n  const handleShowSideBarMenu = () => setShowSideBarMenu(true);\n  const handleCloseSideBarMenu = () => setShowSideBarMenu(false);\n\n  const [restartTutorial, setRestartTutorial] = useState(false);\n  const handleTrueRestartTutorial = () => setRestartTutorial(true);\n  const handleFalseRestartTutorial = () => setRestartTutorial(false);\n\n  const handleShowChoiceHistoryModal = () => {\n    setShowChoiceHistoryModal(true);\n    setShowSideBarMenu(false);\n  };\n  const handleCloseHoiceHistoryModal = () => setShowChoiceHistoryModal(false);\n\n  const handleSimulationEnd = () => {\n    setHasEnded(true);\n    setIsPlaying(false);\n    console.log(\"alert from simulationEnd\");\n    alert(\"Simulation has ended.\");\n  };\n\n  const showError = (text) => {\n    setError(text);\n    setTimeout(() => {\n      setError(\"\");\n    }, 3000);\n  };\n\n  /// add weight argument\n  /// make array of objects (neuron ID, weight)\n  const onEdgeCreate = (src, dst) => {\n    setSrce(src); // srce = src\n    setDest(dst); // dest = dst\n    console.log(\"newEdge\", src, dst);\n\n    setNeurons((draft) => {\n      var outCopy = [...draft[src].out];\n      var weightsDict = { ...draft[src].outWeights };\n      var currWeight = parseInt(weightsDict[dst]);\n\n      if (outCopy.includes(dst)) {\n        handleAddWeight(src, dst, currWeight + 1, 1);\n      } else {\n        handleShowAddWeightModal();\n\n        // outCopy.push(dst)\n        // console.log(outCopy);\n        // draft[src].out = outCopy;\n      }\n    });\n\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n  };\n\n  async function handleEditSynapse(src_id, dst_id, new_weight) {\n    await setNeurons((draft) => {\n      console.log(\"NEW WEIGHT\", new_weight);\n\n      var weightsDict = { ...draft[src_id].outWeights };\n      weightsDict[dst_id] = new_weight;\n      draft[src_id].outWeights = weightsDict;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleDeleteSynapse(srcID, dstID) {\n    await setNeurons((draft) => {\n      var origoutArr = [...draft[srcID].out];\n      // console.log(\"OLD OUT DETAILS \", origoutArr);\n\n      var weightsDict = { ...draft[srcID].outWeights };\n      // console.log(\"WEIGHTS DETAILS\", weightsDict);\n\n      if (weightsDict[dstID] > 1) {\n        draft[srcID].outWeights[dstID] = weightsDict[dstID] - 1;\n      } else {\n        // remove dstID in out\n        let arr = draft[srcID].out.filter(function (item) {\n          return item !== dstID;\n        });\n        draft[srcID].out = arr;\n\n        // remove dstID in outWeights\n        delete draft[srcID].outWeights[dstID];\n      }\n\n      var newoutArr = [...draft[srcID].out];\n      console.log(\"NEW OUT DETAILS \", newoutArr);\n\n      var newweightsDict = { ...draft[srcID].outWeights };\n      console.log(\"WEIGHTS DETAILS\", newweightsDict);\n\n      console.log(\"DELETED SYNAPSE\");\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n\n    handleNullForward();\n  }\n\n  async function handleAddWeight(src, dst, weight, flag) {\n    await setNeurons((draft) => {\n      var weightsDict = { ...draft[src].outWeights };\n      weightsDict[dst] = weight;\n      draft[src].outWeights = weightsDict;\n      console.log(\"WEIGHTS\", weightsDict);\n\n      if (flag == 0) {\n        console.log(\"FLAG IS ZERO\");\n        var outCopy = [...draft[src].out];\n        outCopy.push(dst);\n        draft[src].out = outCopy;\n      }\n    });\n    setSrce(\"\");\n    setDest(\"\");\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n\n    handleNullForward();\n  }\n\n  const handleNewPosition = async (position, id) => {\n    setNeurons((draft) => {\n      draft[id].position = position;\n    });\n    setDirty(true);\n    handleNullForward();\n  };\n\n  async function handleNewNode(newNeuron) {\n    await setNeurons((draft) => {\n      draft[newNeuron.id] = newNeuron;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n  async function handleNewOutput(newOutput) {\n    await setNeurons((draft) => {\n      draft[newOutput.id] = newOutput;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleNewInput(newInput) {\n    await setNeurons((draft) => {\n      draft[newInput.id] = newInput;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleShowDeleteAll() {\n    handleShowDeleteAllModal();\n  }\n\n  async function handleEditNode(id, rules, spikes) {\n    //console.log(\"handleEditNode\")\n    await setNeurons((draft) => {\n      draft[id].startingSpikes = spikes;\n      draft[id].spikes = spikes;\n      draft[id].rules = rules;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleEditInputNode(id, bitstring) {\n    //console.log(\"handleEditNode\")\n    await setNeurons((draft) => {\n      draft[id].bitstring = bitstring;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  /// list all neurons connected to a neuron (delete ID to delete connected synapse)\n  async function handleDeleteNode(neuronId) {\n    console.log(\"handleDeleteNode\", neuronId);\n    await setNeurons((draft) => {\n      for (var k in draft) {\n        //first delete edges connected to neuron\n        var neuron = draft[k];\n        if (!neuron.isOutput && neuron.out) {\n          //const neuronOutKeys = neuron.out;\n          let arr = neuron.out.filter(function (item) {\n            return item !== neuronId;\n          });\n          draft[k].out = arr;\n        }\n      }\n      //delete neuron\n      delete draft[neuronId];\n    });\n\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleDeleteAll() {\n    setNeurons((draft) => {\n      for (var k in draft) {\n        delete draft[k];\n      }\n    });\n    setDirty(true);\n    console.log(\"ALL DELETED\", neurons);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  function setIsClickedSynapse(click_flag, srcID, dstID) {\n    isClickedSynapse = click_flag;\n    srcDel = srcID;\n    dstDel = dstID;\n    let curr_weight;\n\n    if (isClickedSynapse) {\n      setNeurons((draft) => {\n        let weightsDict = { ...draft[srcID].outWeights };\n        curr_weight = parseInt(weightsDict[dstID]);\n      });\n\n      setWeight(curr_weight);\n    }\n  }\n\n  const handleReset = () => {\n    if (time != 0) {\n      var currNeurons = JSON.parse(\n        window.localStorage.getItem(\"originalNeurons\")\n      );\n\n      for (var k in currNeurons) {\n        var neuron = currNeurons[k];\n        if (!neuron.isOutput && !neuron.isInput) {\n          delete currNeurons[neuron.id].chosenRule;\n          delete currNeurons[neuron.id].currentRule;\n        }\n      }\n      window.localStorage.setItem(\n        \"originalNeurons\",\n        JSON.stringify(currNeurons)\n      );\n\n      setNeurons(\n        (draft) =>\n          (draft = JSON.parse(window.localStorage.getItem(\"originalNeurons\")))\n      );\n      setTime(0);\n      setIsPlaying(false);\n      setHasEnded(false);\n      var tempNeurons = window.localStorage.getItem(\"originalNeurons\");\n\n      window.localStorage.clear();\n      window.localStorage.setItem(\"originalNeurons\", tempNeurons);\n    }\n  };\n\n  const [guidedRules, setGuidedRules] = useState({});\n  const handleStartGuidedMode = async (rules) => {\n    await setGuidedRules(rules);\n    setShowChooseRuleModal(true);\n    if (setShowChooseRuleModal) {\n      setIsPlaying(false); //pauses the graph playing while choosing rule\n    }\n  };\n  const handleChosenRules = (data) => {\n    handleCloseChooseRuleModal();\n    setNeurons((draft) => {\n      for (var j in draft) {\n        for (var k in data) {\n          if (j == k) {\n            var [requires, grouped, symbol, consumes, produces, delay] =\n              parseRule(data[k]);\n            draft[j].delay = delay;\n            //console.log(data[k]);\n            draft[j].currentRule = data[k];\n            draft[j].chosenRule = data[k];\n          }\n        }\n      }\n    });\n    //setIsPlaying(true); // continue playing after choosing rule\n  };\n\n  const onForward = async () => {\n    if (time == 0) {\n      //copy\n      console.log(\"FORWARD\");\n      console.log(\"Time is: \" + time);\n      window.localStorage.setItem(\n        \"originalNeurons\",\n        JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n      );\n      window.localStorage.setItem(\"shouldTimeStep\", \"1\");\n      console.log(\n        \"Original neurons on time = 1 \",\n        window.localStorage.getItem(\"originalNeurons\")\n      );\n    }\n    if (!hasEnded) {\n      console.log(\"Time is: \" + time);\n      await setNeurons((neurons) =>\n        step(\n          neurons,\n          time,\n          isRandom,\n          handleStartGuidedMode,\n          handleSimulationEnd\n        )\n      );\n      if (window.localStorage.getItem(\"shouldTimeStep\") == \"1\") {\n        setTime((time) => time + 1);\n      }\n      console.log(\n        `Local storage space used: ${JSON.stringify(localStorage).length * 2}`\n      );\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  };\n\n  const onBackward = async () => {\n    if (time > 1) {\n      var tempTime = time.valueOf();\n      setHasEnded(false);\n      await setNeurons((neurons) => backStep(tempTime - 2));\n      await setTime((time) => time - 1);\n    } else if (time == 1) {\n      handleReset();\n    }\n  };\n  const neuronsRef = useRef(neurons);\n  neuronsRef.current = neurons;\n  const onIntervalStepRef = useRef(onForward);\n  onIntervalStepRef.current = () => {\n    onForward();\n    setPBar((p) => p + 1);\n  };\n\n  useEffect(() => {\n    if (showChooseRuleModal) {\n      console.log(\"showChooseRuleModal is true\");\n    }\n  }, []);\n\n  // Key Bindings\n  function handleSpace() {\n    console.log(\"Space Pressed\");\n    setIsPlaying((p) => !p);\n  }\n\n  function handleRightKey() {\n    console.log(\"Right Key Pressed\");\n    if (!hasEnded) {\n      onIntervalStepRef.current();\n    }\n  }\n\n  function handleLeftKey() {\n    console.log(\"Left Key Pressed\");\n    onBackward();\n  }\n\n  function handleDelBackspaceKey() {\n    if (isClickedSynapse) {\n      handleDeleteSynapse(srcDel, dstDel);\n    } else {\n      console.log(\"No edge clicked.\");\n    }\n    console.log(\"Delete/Bspace Pressed\");\n  }\n\n  useKey(\"Space\", handleSpace);\n  useKey(\"ArrowLeft\", handleLeftKey);\n  useKey(\"ArrowRight\", handleRightKey);\n  useKey(\"Delete\", handleDelBackspaceKey);\n  useKey(\"Backspace\", handleDelBackspaceKey);\n\n  /// handle backspace key for deleting neurons/synapses\n  function splitRules(rules) {\n    const testRe =\n      /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->([0-9]*)a;([0-9]+)/;\n    const forgetRe = /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->(0);(0)/;\n\n    var spikeRules = [];\n    var forgRules = [];\n\n    var splitRules = rules.split(\" \");\n    for (var i = 0; i < splitRules.length; i++) {\n      var testRes = testRe.exec(splitRules[i]);\n      var forgetRes = forgetRe.exec(splitRules[i]);\n\n      if (testRes) {\n        spikeRules.push(splitRules[i]);\n      } else if (forgetRes) {\n        forgRules.push(splitRules[i]);\n      }\n    }\n\n    return [spikeRules, forgRules];\n  }\n\n  function checkIsHover() {\n    //await setIsHover(isHover);\n    console.log(\"isHover is\", isHover);\n    return isHover;\n  }\n\n  function handleNullForward() {\n    document.getElementById(\"forwardBtn\").click();\n  }\n\n  return (\n    <>\n      <Tour\n        handleShowSideBarMenu={handleShowSideBarMenu}\n        handleCloseSideBarMenu={handleCloseSideBarMenu}\n        restartTutorial={restartTutorial}\n        handleFalseRestartTutorial={handleFalseRestartTutorial}\n      />\n      \n        {error && <Alert variant=\"danger\">{error}</Alert>}\n\n        {/* Hamburger Side Menu */}\n        <Menu\n          showSideBarMenu={showSideBarMenu}\n          setShowSideBarMenu={setShowSideBarMenu}\n          hasEnded={hasEnded}\n          setHasEnded={setHasEnded}\n          showError={showError}\n          neurons={neurons}\n          setNeurons={setNeurons}\n          time={time}\n          setTime={setTime}\n          isHover={isHover}\n          setPristine={setPristine}\n          handleShowChoiceHistoryModal={handleShowChoiceHistoryModal}\n          handleTrueRestartTutorial={handleTrueRestartTutorial}\n        />\n        {/* Main App Header */}\n        <Container>\n        <MainHeader\n          setMode={setMode}\n          mode={mode}\n          setIsRandom={setIsRandom}\n          time={time}\n          setTime={setTime}\n          onBackward={onBackward}\n          onForward={onForward}\n          pBar={pBar}\n          isPlaying={isPlaying}\n          setIsPlaying={setIsPlaying}\n          hasEnded={hasEnded}\n          neurons={neurons}\n          onIntervalStepRef={onIntervalStepRef}\n          sld_value={sld_value}\n          setSldValue={setSldValue}\n        />\n        <ComputingControls\n          handleShow={handleShow}\n          handleShowNewInputModal={handleShowNewInputModal}\n          handleShowNewOutputModal={handleShowNewOutputModal}\n          handleShowDeleteModal={handleShowDeleteModal}\n          handleShowEditModal={handleShowEditModal}\n          handleShowEditInputModal={handleShowEditInputModal}\n          handleReset={handleReset}\n        />\n\n        <hr />\n        <Snapse\n          neurons={neurons}\n          onEdgeCreate={(src, dst, addedEles) => {\n            onEdgeCreate(src.id(), dst.id());\n            addedEles.remove();\n          }}\n          handleChangePosition={handleNewPosition}\n          handleDeleteSynapse={handleDeleteSynapse}\n          setIsClickedSynapse={setIsClickedSynapse}\n          handleShowDeleteAll={handleShowDeleteAll}\n          headless={headless}\n          setNeurons={setNeurons}\n          splitRules={splitRules}\n          checkIsHover={checkIsHover}\n          handleShowEditSynapseModal={handleShowEditSynapseModal}\n          handleShowDeleteSynapseModal={handleShowDeleteSynapseModal}\n          time={time}\n        />\n\n        {/* Pop-ups Windows: Modals, Etc */}\n        <ChoiceHistory\n          time={time}\n          showChoiceHistoryModal={showChoiceHistoryModal}\n          handleCloseHoiceHistoryModal={handleCloseHoiceHistoryModal}\n        />\n        <ElementPopUp\n          showElementPopup={showElementPopup}\n          handleCloseElementPopup={handleCloseElementPopup}\n          handleError={showError}\n          nodeID={nodeID}\n          nodeType={nodeType}\n          nodeSRules={nodeSRules}\n          nodeFRules={nodeFRules}\n          nodeSpikes={nodeSpikes}\n          nodeBitstring={nodeBitstring}\n        />\n        <AddSynapseWeightForm\n          showAddWeightModal={showAddWeightModal}\n          handleCloseAddWeightModal={handleCloseAddWeightModal}\n          handleAddWeight={handleAddWeight}\n          handleError={showError}\n          srce={srce}\n          dest={dest}\n        />\n        <NewNodeForm\n          showNewNodeModal={showNewNodeModal}\n          handleCloseModal={handleClose}\n          handleNewNode={handleNewNode}\n          handleError={showError}\n        />\n        <NewOutputNodeForm\n          showNewOutputModal={showNewOutputModal}\n          handleCloseNewOutputModal={handleCloseNewOutputModal}\n          handleNewOutput={handleNewOutput}\n          handleError={showError}\n        />\n        <NewInputNodeForm\n          showNewInputModal={showNewInputModal}\n          handleCloseNewInputModal={handleCloseNewInputModal}\n          handleNewInput={handleNewInput}\n          handleError={showError}\n        />\n        <EditNodeForm\n          showEditModal={showEditModal}\n          handleCloseEditModal={handleCloseEditModal}\n          handleEditNode={handleEditNode}\n          handleError={showError}\n          neurons={neurons}\n        />\n        <EditInputNodeForm\n          showEditInputModal={showEditInputModal}\n          handleCloseEditInputModal={handleCloseEditInputModal}\n          handleEditInputNode={handleEditInputNode}\n          handleError={showError}\n          neurons={neurons}\n        />\n        <EditSynapseForm\n          showEditSynapseModal={showEditSynapseModal}\n          handleCloseEditSynapseModal={handleCloseEditSynapseModal}\n          handleEditSynapse={handleEditSynapse}\n          handleError={showError}\n          neurons={neurons}\n          isClickedSynapse={isClickedSynapse}\n          srcID={srcDel}\n          dstID={dstDel}\n          setWeight={setWeight}\n          weight_main={weight_main}\n          setNeurons={setNeurons}\n          handleDeleteSynapse={handleDeleteSynapse}\n        />\n        <DeleteAllForm\n          showDeleteAllModal={showDeleteAllModal}\n          handleCloseDeleteAllModal={handleCloseDeleteAllModal}\n          handleDeleteAll={handleDeleteAll}\n          handleError={showError}\n        />\n        <DeleteNodeForm\n          showDeleteModal={showDeleteModal}\n          handleCloseDeleteModal={handleCloseDeleteModal}\n          handleDeleteNode={handleDeleteNode}\n          handleError={showError}\n          neurons={neurons}\n        />\n        <DeleteSynapseForm\n          showDeleteSynapseModal={showDeleteSynapseModal}\n          handleCloseDeleteSynapseModal={handleCloseDeleteSynapseModal}\n          handleDeleteSynapse={handleDeleteSynapse}\n          handleError={showError}\n          setNeurons={setNeurons}\n          isClickedSynapse={isClickedSynapse}\n          srcID={srcDel}\n          dstID={dstDel}\n        />\n        <ChooseRuleForm\n          showChooseRuleModal={showChooseRuleModal}\n          handleCloseChooseRuleModal={handleCloseChooseRuleModal}\n          rules={guidedRules}\n          handleChosenRules={handleChosenRules}\n        />\n        {Prompt}\n      </Container>\n    </>\n  );\n}\nexport default SNP;\n","export default __webpack_public_path__ + \"static/media/snp.e9efa255.png\";","export default __webpack_public_path__ + \"static/media/nsnp.e9c3d42a.png\";","import \"./LandingPage.css\";\nimport { BrowserRouter as Router, Switch, Link, Route } from \"react-router-dom\";\nimport snppic from \"./snp.png\";\nimport nsnppic from \"./nsnp.png\";\nfunction LandingPage() {\n  return (\n    <div className=\"welcome\">\n      <div className=\"greet\">\n        <h1>Welcome to WebSnapse 2.1</h1>\n        <br />\n        <p>a visual simulator for Spiking Neural Networks:</p>\n        <p>Please Hover on a side for specifications</p>\n      </div>\n      <div className=\"LinkContainer\">\n        <div class=\"divide-lside\">\n          SN P Simulation\n          <Link to=\"/websnapse_extended/SNP\">\n            <img src={snppic} alt=\"\" />\n            <br />\n            <div class=\"SNP\">\n              -Traditional\n              <br />\n              -1:1 Node to number of Spikes\n              <br />\n              -Linear rules\n            </div>\n          </Link>\n        </div>\n        <div class=\"divide-rside\">\n          NSN P Simulation\n          <Link to=\"/websnapse_extended/NSNP\">\n            <img src={nsnppic} alt=\"\" />\n            <br />\n            <div className=\"NSNP\">\n              -1:Many Node to number of Spikes\n              <br />\n              -can contain non-linear rule functions\n              <br />\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default LandingPage;\n","import { HashRouter as Router, Switch, Link, Route } from \"react-router-dom\";\nimport SNP from \"./pages/SNP/SNP\";\nimport LandingPage from \"./pages/Landing/LandingPage.js\";\nimport NSNP from \"./pages/NSNP/NSNP\";\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <LandingPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/Peace Sans.f59a8de8.otf\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport cytoscape from \"cytoscape\";\nimport popper from \"cytoscape-popper\";\nimport edgehandles from \"cytoscape-edgehandles\";\nimport gridGuide from \"cytoscape-grid-guide\";\nimport \"./fonts/Peace Sans.otf\";\ncytoscape.use(edgehandles);\ncytoscape.use(gridGuide);\ncytoscape.use(popper);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}